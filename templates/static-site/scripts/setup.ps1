# Setup script for {{SERVICE_NAME}}
# Generated by Clodo Framework

param(
    [switch]$Force,
    [switch]$Verbose
)

Write-Host "üîß Setting up {{SERVICE_DISPLAY_NAME}}" -ForegroundColor Cyan
Write-Host "Generated by Clodo Framework" -ForegroundColor Gray
Write-Host ""

# Check if already set up
if ((Test-Path ".env") -and -not $Force) {
    Write-Warning "‚ö†Ô∏è  .env file already exists. Use -Force to overwrite."
    Write-Host "Current configuration:" -ForegroundColor Yellow
    Get-Content ".env" | Select-String "^[^#]" | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
    exit 0
}

# Create .env file from template
Write-Host "üìã Creating .env configuration file..." -ForegroundColor Yellow

$envContent = @"
# Deployment Configuration for {{SERVICE_NAME}}
# Generated by Clodo Framework on $(Get-Date -Format "yyyy-MM-dd")

# ============================================
# Core Customer Identity
# ============================================
CUSTOMER_ID={{SERVICE_NAME}}
CUSTOMER_NAME={{SERVICE_NAME}}
ENVIRONMENT=development

# ============================================
# Cloudflare Configuration
# ============================================
CLOUDFLARE_ACCOUNT_ID=your_account_id_here
CLOUDFLARE_ZONE_ID=your_zone_id_here
CLOUDFLARE_API_TOKEN=your_api_token_here

# ============================================
# Service Configuration
# ============================================
SERVICE_NAME={{SERVICE_NAME}}
SERVICE_TYPE=static-site
DISPLAY_NAME={{SERVICE_DISPLAY_NAME}}
DESCRIPTION=A static site service powered by Clodo Framework

# ============================================
# Domain Configuration
# ============================================
DOMAIN={{DOMAIN_NAME}}
CUSTOMER_DOMAIN={{DOMAIN_NAME}}
DEPLOYMENT_URL=https://{{DOMAIN_NAME}}
API_DOMAIN=https://{{DOMAIN_NAME}}

# ============================================
# Static-Site Configuration
# ============================================
PUBLIC_DIR=public
INDEX_FILE=index.html
ERROR_FILE=404.html
CACHE_CONTROL=public, max-age=31536000, immutable
SPA_FALLBACK=true
CLEAN_URLS=true
COMPRESS_TEXT=true
CORS_ENABLED=true

# ============================================
# Additional Configuration
# ============================================
HEALTH_CHECK_PATH=/health
API_BASE_PATH=/
LOG_LEVEL=info
NODE_COMPATIBILITY=v18

# ============================================
# Custom Environment Variables
# ============================================
# Add your custom environment variables here
# CUSTOM_VAR=value
"@

if ($Force -or -not (Test-Path ".env")) {
    $envContent | Out-File -FilePath ".env" -Encoding UTF8
    Write-Host "‚úÖ Created .env file" -ForegroundColor Green
} else {
    Write-Host "‚ÑπÔ∏è  .env file already exists, skipping creation" -ForegroundColor Blue
}

# Check Node.js version
Write-Host "üîç Checking Node.js version..." -ForegroundColor Yellow
try {
    $nodeVersion = & node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green

    # Check if version is compatible
    $versionNumber = $nodeVersion -replace '^v', ''
    $majorVersion = [int]($versionNumber -split '\.')[0]

    if ($majorVersion -lt 18) {
        Write-Warning "‚ö†Ô∏è  Node.js version $nodeVersion detected. Clodo Framework recommends Node.js 18+"
    }
} catch {
    Write-Error "‚ùå Node.js not found. Please install Node.js 18+ from https://nodejs.org/"
    exit 1
}

# Check npm
try {
    $npmVersion = & npm --version
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
} catch {
    Write-Warning "‚ö†Ô∏è  npm not found. It should be included with Node.js."
}

# Install dependencies
if (Test-Path "package.json") {
    Write-Host "üì¶ Installing dependencies..." -ForegroundColor Yellow
    try {
        if ($Verbose) {
            & npm install
        } else {
            & npm install 2>$null
        }
        Write-Host "‚úÖ Dependencies installed" -ForegroundColor Green
    } catch {
        Write-Error "‚ùå Failed to install dependencies: $($_.Exception.Message)"
        exit 1
    }
} else {
    Write-Warning "‚ö†Ô∏è  package.json not found. Dependencies not installed."
}

# Check Wrangler CLI
Write-Host "üîß Checking Wrangler CLI..." -ForegroundColor Yellow
try {
    $wranglerVersion = & npx wrangler --version 2>$null
    Write-Host "‚úÖ Wrangler: $wranglerVersion" -ForegroundColor Green
} catch {
    Write-Host "üì• Installing Wrangler CLI..." -ForegroundColor Yellow
    try {
        & npm install wrangler --save-dev
        Write-Host "‚úÖ Wrangler CLI installed" -ForegroundColor Green
    } catch {
        Write-Warning "‚ö†Ô∏è  Failed to install Wrangler CLI. You may need to install it manually: npm install -g wrangler"
    }
}

# Validate static files
Write-Host "üìÅ Validating static files..." -ForegroundColor Yellow
$requiredFiles = @("public/index.html", "public/styles.css", "public/app.js")
$missingFiles = @()

foreach ($file in $requiredFiles) {
    if (-not (Test-Path $file)) {
        $missingFiles += $file
    }
}

if ($missingFiles.Count -eq 0) {
    Write-Host "‚úÖ All required static files present" -ForegroundColor Green
} else {
    Write-Warning "‚ö†Ô∏è  Missing static files: $($missingFiles -join ', ')"
    Write-Host "These will be created when you run the setup." -ForegroundColor Gray
}

# Setup complete
Write-Host "" -ForegroundColor Green
Write-Host "üéâ Setup complete for {{SERVICE_DISPLAY_NAME}}!" -ForegroundColor Green
Write-Host "" -ForegroundColor Cyan
Write-Host "Next steps:" -ForegroundColor White
Write-Host "  1. Edit .env with your Cloudflare credentials" -ForegroundColor White
Write-Host "  2. Customize static files in public/" -ForegroundColor White
Write-Host "  3. Run 'npm run dev' to start development" -ForegroundColor White
Write-Host "  4. Run 'npm run deploy' to deploy to production" -ForegroundColor White
Write-Host ""
Write-Host "üìö For help, see README.md or visit https://clodo.dev/docs" -ForegroundColor Gray