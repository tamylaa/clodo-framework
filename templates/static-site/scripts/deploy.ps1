# Deployment script for {{SERVICE_NAME}}
# Generated by Clodo Framework

param(
    [string]$Environment = "production",
    [switch]$DryRun,
    [switch]$Verbose
)

Write-Host "üöÄ Deploying {{SERVICE_DISPLAY_NAME}} ($Environment)" -ForegroundColor Cyan
Write-Host "Generated by Clodo Framework" -ForegroundColor Gray
Write-Host ""

# Load environment variables
if (Test-Path ".env") {
    Write-Host "üìã Loading environment configuration..." -ForegroundColor Yellow
    Get-Content ".env" | ForEach-Object {
        if ($_ -match "^([^#][^=]+)=(.*)$") {
            $key = $matches[1].Trim()
            $value = $matches[2].Trim()
            [Environment]::SetEnvironmentVariable($key, $value)
        }
    }
} else {
    Write-Warning "‚ö†Ô∏è  No .env file found. Using defaults."
}

# Validate required environment variables
$requiredVars = @("CLOUDFLARE_API_TOKEN", "CLOUDFLARE_ACCOUNT_ID")
$missingVars = @()

foreach ($var in $requiredVars) {
    if (-not [Environment]::GetEnvironmentVariable($var)) {
        $missingVars += $var
    }
}

if ($missingVars.Count -gt 0) {
    Write-Error "‚ùå Missing required environment variables: $($missingVars -join ', ')"
    Write-Host "Please set these in your .env file or environment." -ForegroundColor Red
    exit 1
}

# Set deployment environment
$env:CLOUDFLARE_API_TOKEN = [Environment]::GetEnvironmentVariable("CLOUDFLARE_API_TOKEN")
$env:CLOUDFLARE_ACCOUNT_ID = [Environment]::GetEnvironmentVariable("CLOUDFLARE_ACCOUNT_ID")

if ($Verbose) {
    Write-Host "üîß Environment: $Environment" -ForegroundColor Blue
    Write-Host "üì¶ Service: {{SERVICE_NAME}}" -ForegroundColor Blue
    Write-Host "üåê Domain: {{DOMAIN_NAME}}" -ForegroundColor Blue
}

# Check if wrangler is available
try {
    $wranglerVersion = & wrangler --version 2>$null
    Write-Host "‚úÖ Wrangler version: $wranglerVersion" -ForegroundColor Green
} catch {
    Write-Error "‚ùå Wrangler CLI not found. Please install: npm install -g wrangler"
    exit 1
}

# Validate static files exist
if (-not (Test-Path "public")) {
    Write-Error "‚ùå Public directory not found. Please ensure static files are in ./public/"
    exit 1
}

$fileCount = (Get-ChildItem "public" -Recurse -File).Count
Write-Host "üìÅ Found $fileCount static files in public directory" -ForegroundColor Blue

# Dry run mode
if ($DryRun) {
    Write-Host "üèÉ Dry run mode - would execute:" -ForegroundColor Yellow
    Write-Host "   wrangler deploy --env $Environment" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚úÖ Dry run complete - no changes made" -ForegroundColor Green
    exit 0
}

# Deploy to Cloudflare
Write-Host "üöÄ Starting deployment..." -ForegroundColor Cyan

try {
    if ($Verbose) {
        & wrangler deploy --env $Environment
    } else {
        & wrangler deploy --env $Environment 2>$null
    }

    if ($LASTEXITCODE -eq 0) {
        Write-Host "" -ForegroundColor Green
        Write-Host "‚úÖ Deployment successful!" -ForegroundColor Green
        Write-Host "üåê Your site is now live at: https://{{DOMAIN_NAME}}" -ForegroundColor Cyan
        Write-Host ""

        # Health check
        Write-Host "üîç Running health check..." -ForegroundColor Yellow
        try {
            $healthResponse = Invoke-WebRequest -Uri "https://{{DOMAIN_NAME}}/health" -TimeoutSec 10 -UseBasicParsing
            if ($healthResponse.StatusCode -eq 200) {
                Write-Host "‚úÖ Health check passed" -ForegroundColor Green
            } else {
                Write-Warning "‚ö†Ô∏è  Health check returned status: $($healthResponse.StatusCode)"
            }
        } catch {
            Write-Warning "‚ö†Ô∏è  Health check failed: $($_.Exception.Message)"
        }

    } else {
        Write-Error "‚ùå Deployment failed with exit code: $LASTEXITCODE"
        exit $LASTEXITCODE
    }

} catch {
    Write-Error "‚ùå Deployment error: $($_.Exception.Message)"
    exit 1
}

Write-Host ""
Write-Host "üéâ {{SERVICE_DISPLAY_NAME}} deployment complete!" -ForegroundColor Green