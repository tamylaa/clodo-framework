/**
 * undefined - Cloudflare Worker
 *
 * Generated by Lego Framework GenerationEngine
 * Service Type: generic
 */

import { domains } from '../config/domains.js';
import { createServiceHandlers } from '../handlers/service-handlers.js';
import { createServiceMiddleware } from '../middleware/service-middleware.js';

export default {
  async fetch(request, env, ctx) {
    try {
      // Get service configuration
      const serviceConfig = domains['test'];

      // Apply middleware
      const middleware = createServiceMiddleware(serviceConfig, env);
      const processedRequest = await middleware.processRequest(request);

      // Route to appropriate handler
      const handlers = createServiceHandlers(serviceConfig, env);
      const response = await handlers.handleRequest(processedRequest, ctx);

      // Apply response middleware
      return await middleware.processResponse(response);

    } catch (error) {
      console.error('Worker error:', error);

      return new Response(JSON.stringify({
        error: 'Internal Server Error',
        message: error.message,
        timestamp: new Date().toISOString()
      }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'X-Service': 'test',
          'X-Version': '1.0.0'
        }
      });
    }
  }
};
