/**
 * undefined - Service Middleware
 *
 * Generated by Lego Framework GenerationEngine
 * Service Type: generic
 */

export function createServiceMiddleware(serviceConfig, env) {
  return {
    async processRequest(request) {
      let processedRequest = request;

      // Add service context headers
      const headers = new Headers(request.headers);
      headers.set('X-Service', serviceConfig.name);
      headers.set('X-Version', '1.0.0');
      headers.set('X-Environment', 'dev');
      headers.set('X-Request-ID', crypto.randomUUID());

      // CORS headers for API requests
      if (request.url.includes('undefined')) {
        headers.set('Access-Control-Allow-Origin', '*');
        headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      }

      

      

      

      

      return new Request(request.url, {
        ...request,
        headers
      });
    },

    async processResponse(response) {
      const headers = new Headers(response.headers);

      // Add standard response headers
      headers.set('X-Service', serviceConfig.name);
      headers.set('X-Version', '1.0.0');
      headers.set('X-Response-Time', Date.now().toString());

      

      

      return new Response(response.body, {
        ...response,
        headers
      });
    }
  };
}
