/**
 * undefined - Service Schema
 *
 * Generated by Lego Framework GenerationEngine
 * Service Type: generic
 */

import { z } from 'zod';

// Base service schema
export const baseServiceSchema = z.object({
  id: z.string().uuid(),
  createdAt: z.date(),
  updatedAt: z.date(),
  version: z.string().default('1.0.0')
});

// Service-specific schemas based on type

export const genericItemSchema = z.object({
  id: z.string().uuid(),
  type: z.string(),
  data: z.record(z.any()),
  metadata: z.record(z.any()).optional()
});

// Request/Response schemas
export const healthCheckResponseSchema = z.object({
  status: z.enum(['healthy', 'unhealthy']),
  timestamp: z.string().datetime(),
  service: z.string(),
  version: z.string(),
  environment: z.string()
});

export const errorResponseSchema = z.object({
  error: z.string(),
  message: z.string(),
  timestamp: z.string().datetime(),
  service: z.string(),
  version: z.string()
});

// Validation helpers
export function validateServiceRequest(data, schema) {
  try {
    return { success: true, data: schema.parse(data) };
  } catch (error) {
    return {
      success: false,
      error: error.errors.map(err => ({
        field: err.path.join('.'),
        message: err.message
      }))
    };
  }
}

export function createServiceResponse(data, schema) {
  try {
    return { success: true, data: schema.parse(data) };
  } catch (error) {
    throw new Error(`Response validation failed: ${error.message}`);
  }
}
