import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';
import { writeFileSync } from 'fs';

/**
 * README Generator
 * Generates comprehensive README.md documentation for services
 */
export class ReadmeGenerator extends BaseGenerator {
  /**
   * Generate README.md
   * @param {Object} context - Generation context
   * @returns {Promise<string>} Path to generated README file
   */
  async generate(context) {
    const { coreInputs, confirmedValues, servicePath } = this.extractContext(context);
    
    if (!this.shouldGenerate(context)) {
      return null;
    }

    const readmeContent = this._generateReadmeContent(coreInputs, confirmedValues);
    
    const filePath = join(servicePath, 'README.md');
    writeFileSync(filePath, readmeContent, 'utf8');
    return filePath;
  }

  /**
   * Generate README content
   * @private
   */
  _generateReadmeContent(coreInputs, confirmedValues) {
    return `# ${confirmedValues.displayName}

${confirmedValues.description}

## 🚀 Quick Start

\\\`\\\`\\\`bash
# Setup development environment
.\\\\scripts\\\\setup.ps1

# Start development server
npm run dev

# Run tests
npm test

# Deploy to production
.\\\\scripts\\\\deploy.ps1 -Environment production
\\\`\\\`\\\`

## 📋 Features

${Object.entries(confirmedValues.features)
  .filter(([, enabled]) => enabled)
  .map(([feature]) => `- ✅ ${feature.replace(/([A-Z])/g, ' $1').toLowerCase()}`)
  .join('\n')}

## 🏗️ Architecture

This service is built with the **Clodo Framework** and follows a three-tier architecture:

1. **Input Collection**: Collects and validates service requirements
2. **Smart Confirmations**: Generates and confirms derived configuration values
3. **Automated Generation**: Creates all necessary configuration files and components

## 📁 Project Structure

\`\`\`
${coreInputs.serviceName}/
├── src/
│   ├── config/
│   │   └── domains.js          # Domain configuration
│   ├── worker/
│   │   └── index.js            # Cloudflare Worker entry point
│   ├── handlers/
│   │   └── service-handlers.js # Request handlers
│   ├── middleware/
│   │   └── service-middleware.js # Request/response middleware
│   ├── schemas/
│   │   └── service-schema.js   # Data validation schemas
│   └── utils/
│       └── service-utils.js    # Utility functions
├── scripts/
│   ├── deploy.ps1              # Deployment script
│   ├── setup.ps1               # Environment setup
│   └── health-check.ps1        # Health monitoring
├── test/
│   ├── unit/                   # Unit tests
│   └── integration/            # Integration tests
├── config/                     # Environment configurations
├── docs/                       # Documentation
└── wrangler.toml               # Cloudflare Workers config
\`\`\`

## 🔧 Configuration

### Environment Variables

Copy \`.env.example\` to \`.env\` and configure:

\`\`\`bash
# Cloudflare Configuration
CLOUDFLARE_ACCOUNT_ID=your_account_id
CLOUDFLARE_ZONE_ID=your_zone_id
CLOUDFLARE_API_TOKEN=your_api_token

# Service Configuration
SERVICE_NAME=${coreInputs.serviceName}
SERVICE_TYPE=${coreInputs.serviceType}
DOMAIN_NAME=${coreInputs.domainName}
ENVIRONMENT=${coreInputs.environment}
\`\`\`

### Service URLs

- **Production**: ${confirmedValues.productionUrl}
- **Staging**: ${confirmedValues.stagingUrl}
- **Development**: ${confirmedValues.developmentUrl}
- **Documentation**: ${confirmedValues.documentationUrl}

## 🧪 Testing

\`\`\`bash
# Run all tests
npm test

# Run with coverage
npm run test:coverage

# Run integration tests only
npm test -- --testPathPattern=integration
\`\`\`

## 🚀 Deployment

### Development

\`\`\`bash
npm run dev
\`\`\`

### Staging

\`\`\`bash
.\\scripts\\deploy.ps1 -Environment staging
\`\`\`

### Production

\`\`\`bash
.\\scripts\\deploy.ps1 -Environment production
\`\`\`

## 🏥 Health Checks

\`\`\`bash
# Check service health
.\\scripts\\health-check.ps1 -Environment production
\`\`\`

Health check endpoint: \`${confirmedValues.healthCheckPath}\`

## 📚 API Documentation

API Base Path: \`${confirmedValues.apiBasePath}\`

See [API Documentation](./docs/API.md) for detailed endpoint information.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## 📄 License

${confirmedValues.author} - Generated by Clodo Framework v3.0.0

## 🔗 Links

- **Repository**: ${confirmedValues.gitRepositoryUrl}
- **Documentation**: ${confirmedValues.documentationUrl}
- **Health Check**: ${confirmedValues.productionUrl}${confirmedValues.healthCheckPath}
`;
  }

  /**
   * Determine if generator should run
   */
  shouldGenerate(context) {
    return true; // Always generate README
  }
}
