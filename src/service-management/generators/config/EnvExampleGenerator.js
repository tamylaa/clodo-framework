import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';

/**
 * EnvExampleGenerator
 * 
 * Generates .env.example file with environment variable templates.
 * 
 * Responsibilities:
 * - Generate Cloudflare configuration variables (account/zone/token)
 * - Generate service configuration variables
 * - Generate environment-specific URLs
 * - Generate API configuration (base path, health check)
 * - Generate database configuration
 * - Generate feature flag variables
 * - Include placeholder comments for custom variables
 * 
 * Output:
 * - .env.example (environment variable template file)
 */
export class EnvExampleGenerator extends BaseGenerator {
  constructor(options = {}) {
    super({
      name: 'EnvExampleGenerator',
      description: 'Generates .env.example template file',
      outputPath: '.env.example',
      ...options
    });
  }

  /**
   * Always generate .env.example
   */
  shouldGenerate(context) {
    return true;
  }

  /**
   * Generate .env.example file
   */
  async generate(context) {
    // Support both new structured format and legacy flat format
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;
    const servicePath = context.servicePath || context.outputDir;

    this.setContext({ coreInputs, confirmedValues, servicePath });

    // Build .env.example content
    const content = this._buildEnvExample(coreInputs, confirmedValues);

    // Write file to root directory
    await this.writeFile('.env.example', content);

    // Return full path for backward compatibility
    return join(servicePath, '.env.example');
  }

  /**
   * Build the complete .env.example content
   */
  _buildEnvExample(coreInputs, confirmedValues) {
    const featureFlags = this._generateFeatureFlags(confirmedValues.features);

    return `# ${confirmedValues.displayName} Environment Variables
# Generated by Clodo Framework GenerationEngine

# Cloudflare Configuration
CLOUDFLARE_ACCOUNT_ID=${coreInputs.cloudflareAccountId}
CLOUDFLARE_ZONE_ID=${coreInputs.cloudflareZoneId}
CLOUDFLARE_API_TOKEN=${coreInputs.cloudflareToken}

# Service Configuration
SERVICE_NAME=${coreInputs.serviceName}
SERVICE_TYPE=${coreInputs.serviceType}
DOMAIN_NAME=${coreInputs.domainName}
ENVIRONMENT=${coreInputs.environment}

# URLs
PRODUCTION_URL=${confirmedValues.productionUrl}
STAGING_URL=${confirmedValues.stagingUrl}
DEVELOPMENT_URL=${confirmedValues.developmentUrl}
DOCUMENTATION_URL=${confirmedValues.documentationUrl}

# API Configuration
API_BASE_PATH=${confirmedValues.apiBasePath}
HEALTH_CHECK_PATH=${confirmedValues.healthCheckPath}

# Database Configuration
DATABASE_NAME=${confirmedValues.databaseName}

# Feature Flags
${featureFlags}

# Custom environment variables (uncomment and configure as needed)
# CUSTOM_VAR=value
# API_KEY=your-api-key-here
# SECRET_KEY=your-secret-key-here
`;
  }

  /**
   * Generate feature flags section
   */
  _generateFeatureFlags(features) {
    if (!features || typeof features !== 'object') {
      return '# No feature flags configured';
    }

    const flagEntries = Object.entries(features)
      .filter(([, enabled]) => enabled)
      .map(([feature]) => `FEATURE_${feature.toUpperCase()}=true`);

    return flagEntries.length > 0
      ? flagEntries.join('\n')
      : '# No feature flags configured';
  }

  /**
   * Validate context has required fields
   */
  validateContext(context) {
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;

    const required = [
      { field: 'cloudflareAccountId', source: coreInputs },
      { field: 'cloudflareZoneId', source: coreInputs },
      { field: 'cloudflareToken', source: coreInputs },
      { field: 'serviceName', source: coreInputs },
      { field: 'serviceType', source: coreInputs },
      { field: 'domainName', source: coreInputs },
      { field: 'environment', source: coreInputs },
      { field: 'displayName', source: confirmedValues },
      { field: 'productionUrl', source: confirmedValues },
      { field: 'stagingUrl', source: confirmedValues },
      { field: 'developmentUrl', source: confirmedValues },
      { field: 'documentationUrl', source: confirmedValues },
      { field: 'apiBasePath', source: confirmedValues },
      { field: 'healthCheckPath', source: confirmedValues },
      { field: 'databaseName', source: confirmedValues }
    ];

    const missing = required
      .filter(({ field, source }) => !source || !source[field])
      .map(({ field }) => field);

    if (missing.length > 0) {
      throw new Error(
        `EnvExampleGenerator: Missing required fields: ${missing.join(', ')}`
      );
    }

    return true;
  }
}
