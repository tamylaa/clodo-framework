import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';

/**
 * ProductionEnvGenerator
 * 
 * Generates config/production.env file for production environment.
 */
export class ProductionEnvGenerator extends BaseGenerator {
  constructor(options = {}) {
    super({
      name: 'ProductionEnvGenerator',
      description: 'Generates production environment configuration',
      outputPath: 'config/production.env',
      ...options
    });
  }

  shouldGenerate(context) {
    return true;
  }

  async generate(context) {
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;
    const servicePath = context.servicePath || context.outputDir;

    this.setContext({ coreInputs, confirmedValues, servicePath });

    const content = `# Production Environment Configuration
# Generated by Clodo Framework GenerationEngine

# Service Configuration
SERVICE_NAME=${coreInputs.serviceName}
SERVICE_TYPE=${coreInputs.serviceType}
ENVIRONMENT=production

# URLs
PRODUCTION_URL=${confirmedValues.productionUrl}
STAGING_URL=${confirmedValues.stagingUrl}
DEVELOPMENT_URL=${confirmedValues.developmentUrl}

# Cloudflare Configuration
CLOUDFLARE_ACCOUNT_ID=${coreInputs.cloudflareAccountId}
CLOUDFLARE_ZONE_ID=${coreInputs.cloudflareZoneId}

# Database
DATABASE_NAME=${confirmedValues.databaseName}

# Logging and Monitoring
LOG_LEVEL=warn
METRICS_ENABLED=true
ERROR_REPORTING_ENABLED=true
`;

    await this.writeFile(join('config', 'production.env'), content);
    return join(servicePath, 'config', 'production.env');
  }

  validateContext(context) {
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;

    const required = [
      { field: 'serviceName', source: coreInputs },
      { field: 'serviceType', source: coreInputs },
      { field: 'cloudflareAccountId', source: coreInputs },
      { field: 'cloudflareZoneId', source: coreInputs },
      { field: 'productionUrl', source: confirmedValues },
      { field: 'stagingUrl', source: confirmedValues },
      { field: 'developmentUrl', source: confirmedValues },
      { field: 'databaseName', source: confirmedValues }
    ];

    const missing = required
      .filter(({ field, source }) => !source || !source[field])
      .map(({ field }) => field);

    if (missing.length > 0) {
      throw new Error(
        `ProductionEnvGenerator: Missing required fields: ${missing.join(', ')}`
      );
    }

    return true;
  }
}
