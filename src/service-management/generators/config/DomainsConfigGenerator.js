import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';

/**
 * DomainsConfigGenerator
 * 
 * Generates src/config/domains.js configuration file.
 * 
 * Responsibilities:
 * - Generate domain configuration using createDomainConfigSchema from framework
 * - Configure multi-environment URLs (production/staging/development)
 * - Configure database bindings
 * - Include service metadata and feature flags
 * - Support multi-service domain configuration
 * 
 * Output:
 * - src/config/domains.js (ES module with domain configuration object)
 */
export class DomainsConfigGenerator extends BaseGenerator {
  constructor(options = {}) {
    super({
      name: 'DomainsConfigGenerator',
      description: 'Generates domain configuration in src/config/domains.js',
      outputPath: 'src/config/domains.js',
      ...options
    });
  }

  /**
   * Always generate domains configuration
   */
  shouldGenerate(context) {
    return true;
  }

  /**
   * Generate domains.js configuration
   */
  async generate(context) {
    // Support both new structured format and legacy flat format
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;
    const servicePath = context.servicePath || context.outputDir;

    this.setContext({ coreInputs, confirmedValues, servicePath });

    // Build domains.js content
    const content = this._buildDomainsConfig(coreInputs, confirmedValues);

    // Write file to src/config/domains.js
    // Note: writeFile in BaseGenerator will join this with servicePath
    await this.writeFile(join('src', 'config', 'domains.js'), content);

    // Return full path for backward compatibility
    return join(servicePath, 'src', 'config', 'domains.js');
  }

  /**
   * Build the complete domains.js configuration content
   */
  _buildDomainsConfig(coreInputs, confirmedValues) {
    const timestamp = new Date().toISOString();
    
    return `import { createDomainConfigSchema } from '@tamyla/clodo-framework';

/**
 * Domain configuration for ${confirmedValues.displayName}
 *
 * Generated by Clodo Framework GenerationEngine
 * Service Type: ${coreInputs.serviceType}
 * Generated: ${timestamp}
 */

export const domains = {
  '${coreInputs.serviceName}': {
    ...createDomainConfigSchema(),
    name: '${coreInputs.serviceName}',
    displayName: '${confirmedValues.displayName}',
    description: '${confirmedValues.description}',
    accountId: '${coreInputs.cloudflareAccountId}',
    zoneId: '${coreInputs.cloudflareZoneId}',
    domains: {
      production: '${confirmedValues.productionUrl}',
      staging: '${confirmedValues.stagingUrl}',
      development: '${confirmedValues.developmentUrl}'
    },
    services: [
      '${coreInputs.serviceName}'
    ],
    databases: [
      {
        name: '${confirmedValues.databaseName}',
        type: 'd1',
        binding: 'DB'
      }
    ],
    features: ${JSON.stringify(confirmedValues.features, null, 4)},
    metadata: {
      version: '${confirmedValues.version}',
      author: '${confirmedValues.author}',
      generatedAt: '${timestamp}',
      frameworkVersion: '3.0.0',
      serviceType: '${coreInputs.serviceType}',
      environment: '${coreInputs.environment}'
    }
  }
};

export default domains;
`;
  }

  /**
   * Validate context has required fields
   */
  validateContext(context) {
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;

    const required = [
      { field: 'serviceName', source: coreInputs },
      { field: 'serviceType', source: coreInputs },
      { field: 'environment', source: coreInputs },
      { field: 'cloudflareAccountId', source: coreInputs },
      { field: 'cloudflareZoneId', source: coreInputs },
      { field: 'displayName', source: confirmedValues },
      { field: 'description', source: confirmedValues },
      { field: 'productionUrl', source: confirmedValues },
      { field: 'stagingUrl', source: confirmedValues },
      { field: 'developmentUrl', source: confirmedValues },
      { field: 'databaseName', source: confirmedValues },
      { field: 'version', source: confirmedValues },
      { field: 'author', source: confirmedValues },
      { field: 'features', source: confirmedValues }
    ];

    const missing = required
      .filter(({ field, source }) => !source || source[field] === undefined)
      .map(({ field }) => field);

    if (missing.length > 0) {
      throw new Error(
        `DomainsConfigGenerator: Missing required fields: ${missing.join(', ')}`
      );
    }

    return true;
  }
}
