import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';

/**
 * WorkerIndexGenerator
 * 
 * Generates src/worker/index.js - the main Cloudflare Worker entry point.
 * 
 * Responsibilities:
 * - Generate Worker fetch handler
 * - Import domain configuration, handlers, and middleware
 * - Set up request/response processing pipeline
 * - Implement error handling with structured error responses
 * - Include service metadata in error headers
 * 
 * Output:
 * - src/worker/index.js (ES module with default export fetch handler)
 */
export class WorkerIndexGenerator extends BaseGenerator {
  constructor(options = {}) {
    super({
      name: 'WorkerIndexGenerator',
      description: 'Generates Cloudflare Worker entry point in src/worker/index.js',
      outputPath: 'src/worker/index.js',
      ...options
    });
  }

  /**
   * Always generate worker index
   */
  shouldGenerate(context) {
    return true;
  }

  /**
   * Generate src/worker/index.js
   */
  async generate(context) {
    // Support both new structured format and legacy flat format
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;
    const servicePath = context.servicePath || context.outputDir;

    this.setContext({ coreInputs, confirmedValues, servicePath });

    // Build worker index content
    const content = this._buildWorkerIndex(coreInputs, confirmedValues);

    // Write file to src/worker/index.js
    await this.writeFile(join('src', 'worker', 'index.js'), content);

    // Return full path for backward compatibility
    return join(servicePath, 'src', 'worker', 'index.js');
  }

  /**
   * Build the complete worker index.js content
   */
  _buildWorkerIndex(coreInputs, confirmedValues) {
    return `/**
 * ${confirmedValues.displayName} - Cloudflare Worker
 *
 * Generated by Clodo Framework GenerationEngine
 * Service Type: ${coreInputs.serviceType}
 */

import { domains } from '../config/domains.js';
import { createServiceHandlers } from '../handlers/service-handlers.js';
import { createServiceMiddleware } from '../middleware/service-middleware.js';

export default {
  async fetch(request, env, ctx) {
    try {
      // Get service configuration
      const serviceConfig = domains['${coreInputs.serviceName}'];

      // Apply middleware
      const middleware = createServiceMiddleware(serviceConfig, env);
      const processedRequest = await middleware.processRequest(request);

      // Route to appropriate handler
      const handlers = createServiceHandlers(serviceConfig, env);
      const response = await handlers.handleRequest(processedRequest, ctx);

      // Apply response middleware
      return await middleware.processResponse(response);

    } catch (error) {
      console.error('Worker error:', error);

      return new Response(JSON.stringify({
        error: 'Internal Server Error',
        message: error.message,
        timestamp: new Date().toISOString()
      }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'X-Service': '${coreInputs.serviceName}',
          'X-Version': '${confirmedValues.version}'
        }
      });
    }
  }
};
`;
  }

  /**
   * Validate context has required fields
   */
  validateContext(context) {
    const coreInputs = context.coreInputs || context;
    const confirmedValues = context.confirmedValues || context;

    const required = [
      { field: 'serviceName', source: coreInputs },
      { field: 'serviceType', source: coreInputs },
      { field: 'displayName', source: confirmedValues },
      { field: 'version', source: confirmedValues }
    ];

    const missing = required
      .filter(({ field, source }) => !source || !source[field])
      .map(({ field }) => field);

    if (missing.length > 0) {
      throw new Error(
        `WorkerIndexGenerator: Missing required fields: ${missing.join(', ')}`
      );
    }

    return true;
  }
}
