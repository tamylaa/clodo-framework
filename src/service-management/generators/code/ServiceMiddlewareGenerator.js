import { BaseGenerator } from '../BaseGenerator.js';
import { join } from 'path';
import { mkdirSync, writeFileSync } from 'fs';

/**
 * Service Middleware Generator
 * Generates middleware functions for request/response processing
 */
export class ServiceMiddlewareGenerator extends BaseGenerator {
  /**
   * Generate service middleware
   * @param {Object} context - Generation context
   * @returns {Promise<string>} Path to generated middleware file
   */
  async generate(context) {
    const { coreInputs, confirmedValues, servicePath } = this.extractContext(context);
    
    if (!this.shouldGenerate(context)) {
      return null;
    }

    const middlewareContent = `/**
 * ${confirmedValues.displayName} - Service Middleware
 *
 * Generated by Clodo Framework GenerationEngine
 * Service Type: ${coreInputs.serviceType}
 */

export function createServiceMiddleware(serviceConfig, env) {
  return {
    async processRequest(request) {
      let processedRequest = request;

      // Add service context headers
      const headers = new Headers(request.headers);
      headers.set('X-Service', serviceConfig.name);
      headers.set('X-Version', '${confirmedValues.version}');
      headers.set('X-Environment', '${coreInputs.environment}');
      headers.set('X-Request-ID', crypto.randomUUID());

      // CORS headers for API requests
      if (request.url.includes('${confirmedValues.apiBasePath}')) {
        headers.set('Access-Control-Allow-Origin', '*');
        headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      }

      ${confirmedValues.features.logging ? `
      // Request logging
      console.log(\`[\${new Date().toISOString()}] \${request.method} \${request.url}\`);` : ''}

      ${confirmedValues.features.rateLimiting ? `
      // Rate limiting (placeholder - implement based on requirements)
      // This would typically check request frequency and block if over limit` : ''}

      ${confirmedValues.features.authentication ? `
      // Authentication middleware (placeholder)
      // This would validate JWT tokens, API keys, etc.` : ''}

      ${confirmedValues.features.authorization ? `
      // Authorization middleware (placeholder)
      // This would check user permissions and roles` : ''}

      return new Request(request.url, {
        ...request,
        headers
      });
    },

    async processResponse(response) {
      const headers = new Headers(response.headers);

      // Add standard response headers
      headers.set('X-Service', serviceConfig.name);
      headers.set('X-Version', '${confirmedValues.version}');
      headers.set('X-Response-Time', Date.now().toString());

      ${confirmedValues.features.monitoring ? `
      // Response monitoring
      console.log(\`Response: \${response.status} (\${Date.now()}ms)\`);` : ''}

      ${confirmedValues.features.caching ? `
      // Cache headers (placeholder - implement based on content type)
      if (response.status === 200) {
        headers.set('Cache-Control', 'public, max-age=300'); // 5 minutes
      }` : ''}

      return new Response(response.body, {
        ...response,
        headers
      });
    }
  };
}
`;

    const filePath = join(servicePath, 'src', 'middleware', 'service-middleware.js');
    
    // Ensure directory exists
    const dir = join(servicePath, 'src', 'middleware');
    mkdirSync(dir, { recursive: true });
    
    writeFileSync(filePath, middlewareContent, 'utf8');
    this.logger.info(`Generated: ${filePath}`);
    
    return filePath;
  }

  /**
   * Determine if generator should run
   */
  shouldGenerate(context) {
    return true; // Always generate middleware
  }
}
